TOPICS                            IMPORTANCE                                    STATUS                 

1.  DBMS                              HIGH                                     COMPLETED
2.  OOM                               HIGH                                     IN PROGRESS...
3.  OS                                MEDIUM
4.  DATA STRUCTURES                   HIGH                                     C0MPLETED     
5.  SOFTWARE MODELS                   MEDIUM 
6.  COMPUTER ARHITECTURE              MEDIUM
7.  NETWORKS                          HIGH
8.  ARTIFICAL INTELLIGENCE            MEDIUM
9.  DESIGN ALGORITHMS                 HIGH                                     COMPLETED
10. Distributed Systems               HIGH

-----------------------------------------
1. PROJECTS AND GITHUB
2. PRE-PREPARED ANSWERS
-----------------------------------------

1. DataBase Management System: 

  (a) Functional Dependecies and Keys:
              i.    a->b; if we have a we can search b. a=determinant; b=dependent; 
              ii.   trivial;(have no use b subset of a) and non-trivial;(useful, b is not subset of a) Dependecies;
              iii.  closure set of attributes: if closure contains all elements then it will be candidate key;
                    equivalence relation
              iv.   canonical form: if your presence doesn't change system the u are redundant;
              v.    primary key is selected by user from pool of candidate keys;
              vi.   foreign key: it is an attribute or set of attributes that ref, to primary key of same or 
                    another table;
                    a table can have multiple foreign keys
                    concept of foreign key:-> referntial integrity: amazon-flipkart example with Ram college counter eg.
                    if we delete some data entry from base table this may cause voilation : 
                      ondeletecascade-> automatically delete from all refrencing table (most important)
                      ondeletesetNULL-> automatically put NULL at FK     
                    if we update some entry in base table then voilation may occur but we apply same ways to get rid of.   
  (b) Normalisation:
              i.    technique to organize data into multiple tables, to minimize the data redundancy;
              ii.   Redundant data produce anomalies in insertion, updation and deletion;
              iii.  types are : 1NF,2NF,3NF,BCNF,4NF,5NF
              iv.   1nf -> Data Atomicity;
              v.    2NF -> Do not have any partial dependencies;
              vi.   3Nf -> Do not have any transitive dependency;
              vii.  BCNF -> if a->b then a must be a super key; nonprime->prime not allowed;
  (c) Indexing:
              i.   file is stored in blocks;
              ii.  blocks may be sorted or maynot be;
              iii. make a additional table stores index and block pointers;
              iv.  types of indexing: primary -> used when file is sorted and selected attr. is primary key;
                          ,cluster -> used when file is sorted and selected attr. is not  primary key
                          ,secondary -> non sorted file data; but index is sorted 
                          ,multilevel indexing -> using b+ trees;
  (d) Query Optimisation: 
              i.   A set of equivalence rules is said to be minimal if no rule can be derived from any 
                   combination of the others. A query is said to be optimal when it is minimal.
              ii.  Do selection process as early as possible as it reduces search space for joins "EARLY SELECTION !!"
  (e) Transactions:
              i.   ACID properties Atomicity,Concurrency, Isolation, Durability;
              ii.  Advantages of concurrency : resource sharing, fast
              iii. Dirty Read, Unrepeatable read, Lost Update, Phantom Read.
              iv.  Conflict Serializability.

2. Object Oriented Methodology:  

  (a) CONCEPTS:
              i.   Classes and Objects:
                          It is the basic concept of OOP; an extended concept of the structure used in C. 
                          It is an abstract and user-defined data type.

              ii.  Inheritance:
                          Inheritance is the ability of one class to inherit capabilities or properties of another class, called the parent class. 
                          When we write a class, we inherit properties from other classes. 
                          So when we create a class, we do not need to write all the properties and functions again and again, 
                          as these can be inherited from another class which possesses it. 
                          Inheritance allows the user to reuse the code whenever possible and reduce its redundancy.
                                        
              iii. Data Abstraction:
                          Abstraction refers to the act of representing important and special features without 
                          including the background details or explanation about that feature. Data abstraction simplifies database design.
                          -> Physical Level
                          -> logical Level
                          -> User Level

              iv.  Encapsulation:
                          Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit, e.g., a class in Java. 
                          This concept is often used to hide the internal state representation of an object from the outside.

              v.   Polymorphism:
                          Polymorphism is the ability of data to be processed in more than one form.
                          -> method Overloading
                          -> method Overridding
                          -> virtual Function

  (b) Approach: 
              Object-oriented programming (OOP) is nothing but that which 
              allows the writing of programs with the help of certain classes and real-time objects.


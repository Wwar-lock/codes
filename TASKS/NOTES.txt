TOPICS                            IMPORTANCE                                    STATUS                 

1.  DBMS                              HIGH                                     COMPLETED
2.  OOM                               HIGH                                     COMPLETED
3.  OS                                MEDIUM                                   IN PROGRESS...
4.  DATA STRUCTURES                   HIGH                                     C0MPLETED     
5.  SOFTWARE MODELS                   MEDIUM                                   COMPLETED
6.  COMPUTER ARHITECTURE              MEDIUM
7.  NETWORKS                          HIGH                                     IN PROGRESS...
8.  ARTIFICAL INTELLIGENCE            MEDIUM
9.  DESIGN ALGORITHMS                 HIGH                                     COMPLETED
10. Distributed Systems               HIGH

-----------------------------------------
1. PROJECTS AND GITHUB
2. PRE-PREPARED ANSWERS
-----------------------------------------

1. DataBase Management System: 

  (a) Functional Dependecies and Keys:
              i.    a->b; if we have a we can search b. a=determinant; b=dependent; 
              ii.   trivial;(have no use b subset of a) and non-trivial;(useful, b is not subset of a) Dependecies;
              iii.  closure set of attributes: if closure contains all elements then it will be candidate key;
                    equivalence relation
              iv.   canonical form: if your presence doesn't change system the u are redundant;
              v.    primary key is selected by user from pool of candidate keys;
              vi.   foreign key: it is an attribute or set of attributes that ref, to primary key of same or 
                    another table;
                    a table can have multiple foreign keys
                    concept of foreign key:-> referntial integrity: amazon-flipkart example with Ram college counter eg.
                    if we delete some data entry from base table this may cause voilation : 
                      ondeletecascade-> automatically delete from all refrencing table (most important)
                      ondeletesetNULL-> automatically put NULL at FK     
                    if we update some entry in base table then voilation may occur but we apply same ways to get rid of.   
  (b) Normalisation:
              i.    technique to organize data into multiple tables, to minimize the data redundancy;
              ii.   Redundant data produce anomalies in insertion, updation and deletion;
              iii.  types are : 1NF,2NF,3NF,BCNF,4NF,5NF
              iv.   1nf -> Data Atomicity;
              v.    2NF -> Do not have any partial dependencies;
              vi.   3Nf -> Do not have any transitive dependency;
              vii.  BCNF -> if a->b then a must be a super key; nonprime->prime not allowed;
  (c) Indexing:
              i.   file is stored in blocks;
              ii.  blocks may be sorted or maynot be;
              iii. make a additional table stores index and block pointers;
              iv.  types of indexing: primary -> used when file is sorted and selected attr. is primary key;
                          ,cluster -> used when file is sorted and selected attr. is not  primary key
                          ,secondary -> non sorted file data; but index is sorted 
                          ,multilevel indexing -> using b+ trees;
  (d) Query Optimisation: 
              i.   A set of equivalence rules is said to be minimal if no rule can be derived from any 
                   combination of the others. A query is said to be optimal when it is minimal.
              ii.  Do selection process as early as possible as it reduces search space for joins "EARLY SELECTION !!"
  (e) Transactions:
              i.   ACID properties Atomicity,Concurrency, Isolation, Durability;
              ii.  Advantages of concurrency : resource sharing, fast
              iii. Dirty Read, Unrepeatable read, Lost Update, Phantom Read.
              iv.  Conflict Serializability.

2. Object Oriented Methodology:  

  (a) CONCEPTS:
              i.   Classes and Objects:
                          It is the basic concept of OOP; an extended concept of the structure used in C. 
                          It is an abstract and user-defined data type.

              ii.  Inheritance:
                          Inheritance is the ability of one class to inherit capabilities or properties of another class, called the parent class. 
                          When we write a class, we inherit properties from other classes. 
                          So when we create a class, we do not need to write all the properties and functions again and again, 
                          as these can be inherited from another class which possesses it. 
                          Inheritance allows the user to reuse the code whenever possible and reduce its redundancy.
                          **C++ able to perform multiple Inheritance but not other languages because it is error prone!!
                          **Diamond problem of Inheritance. Causes Ambiguities in child class object.
                                        
              iii. Data Abstraction:
                          Abstraction refers to the act of representing important and special features without 
                          including the background details or explanation about that feature. Data abstraction simplifies database design.
                          -> Physical Level
                          -> logical Level
                          -> User Level

              iv.  Encapsulation:
                          Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). 
                          It describes the idea of wrapping data and the methods that work on data within one unit, e.g., a class in Java. 
                          This concept is often used to hide the internal state representation of an object from the outside.
                          **Encapsulation also leads to data abstraction or hiding. As using encapsulation also hides the data.

              v.   Polymorphism:
                          Polymorphism is the ability of data to be processed in more than one form.
                          -> method Overloading (compile time)
                          -> method Overridding (run time)
                          -> virtual Function

  (b) Approach: 
              Object-oriented programming (OOP) is nothing but that which 
              allows the writing of programs with the help of certain classes and real-time objects.

  (c) Advantages: 
              -> It models real world.
              -> Programs are easy to understand and mantainable.
              -> It offers code reusability.
              -> Easier to test and manage code.

  (d) Disadvantages:
              -> Classes sometimes tend to be OVER-GENERALISED.
              -> Relation among classes become superfacial.
              -> It is tricky, so one need proper design and understanding before writing the code.

3. Operating System:

  (a) Basics: 
             -> An Operating System acts as a communication bridge (interface) between the
                user and computer hardware. The purpose of an operating system is to provide
                a platform on which a user can execute programs in a convenient and efficient manner.
             -> Types: Batch, Time sharing, real time, distributed, network operating systems.
             -> Multiprogramming – A computer running more than one program at a time (like running Excel and Firefox simultaneously).
                Multiprocessing – A computer using more than one CPU at a time.
                Multitasking – Tasks sharing a common resource (like 1 CPU).
                Multithreading is an extension of multitasking.
             -> The major way in which multitasking differs from multi programming is that multi programming works solely on the concept of context switching 
                whereas multitasking is based on time sharing alongside the concept of context switching.
  
  (b) System Structure: 
             -> Kernel is the core part of an operating system which manages system resources. It also acts like a bridge between application and hardware of the computer. 
                It is one of the first programs loaded on start-up (after the Bootloader).
             -> The CPU can execute certain instruction only when it is in the kernel mode. These instruction are called privilege instruction. 
             -> in a microkernel, the user services and kernel services are implemented in different address space. The user services are kept in user address space, 
                and kernel services are kept under kernel address space, thus also reduces the size of kernel and size of operating system as well.
             -> This kernel provides CPU scheduling, memory management, file management and other operating system functions through system calls.
                As both services are implemented under same address space, this makes operating system execution faster.

  (c) CPU Scheduling:
             -> A process is a program in execution.
             -> The process of saving the context of one process and loading the context of another process is known as Context Switching.
             -> A mode switch occurs when CPU privilege level is changed.
             -> An I/O-bound process spends more time in the waiting state.
             -> As the operating system supports multi-programming, it needs to keep track of all the processes. For this task,
                the process control block (PCB) is used to track the process’s execution status
             -> The process table is an array of PCB’s, that means logically contains a PCB for all of the current processes in the system.
             -> Arrival Time: Time at which the process arrives in the ready queue.
                Completion Time: Time at which process completes its execution.
                Burst Time: Time required by a process for CPU execution.
                Turn Around Time: Time Difference between completion time and arrival time.
                Turn Around Time = Completion Time – Arrival Time
                Waiting Time(W.T): Time Difference between turn around time and burst time.
                Waiting Time = Turn Around Time – Burst Time
          ** -> Convoy Effect is phenomenon associated with the First Come First Serve (FCFS) algorithm, 
                in which the whole Operating System slows down due to few slow processes.
          ** -> In Belady Anomaly, the number of page faults increase too much that it slows down the system. But this anmoly 
                dont take place in LRU as it uses stack based algorithm.

  (d) Process Synchronisation: 
             ->  Independent and cooperative processes.
             ->  Race condition when more than 1 processes executing same code and accessing same memory.
             ->  Critical section is a code segment that can be accessed by only one process at a time.
             ->  3 conditions : mutual exclusion, progress, bound waiting.
             ->  Peterson solution uses flag and turn to avoid deadlock.
             ->  The repeated execution of a loop of code while waiting for an event to occur is called busy-waiting.
             ->  Inter process communication (IPC) is a mechanism which allows processes to communicate with each other and synchronize their actions. 
             
  (e) Deadlock: 
             -> Deadlock detection by reource allocation graph.
             -> Recovery metho: killing the process, resource preemption.
             -> Banker's algorithm.
      
  (f) Processes and thread:   
             -> Thread types: kernel ad user level.
             -> Thread has program counter, register set, stack space.
             -> Threads are not independent of each other.
             -> Multi-threading Models.
             -> Advantages: resposiveness, resource sharing, economy, scalability.
             -> This state of the child process is known as the Zombie state.

  (g) Memory Management: 
             -> Memory Hierarchy is an enhancement to organize the memory such that it can minimize the access time. 
             -> Types of RAM: SRAM(Static RAM):cache , DRAM(Dynamic RAM):main memory
             -> Contigous memory -> fixed size and Variable size.
             -> Variable size partitioning do not have internal fragmentation, but may have external fragmentation. 
             -> Non-Contagious -> paging and segmentation. (increases overhead for address translation.)
             -> Address -> Logical(generated by cpu,user can view) and Physical(location of required data in memory,user cant view).
             -> Requirement of memory management: relocation, protection, sharing.
             -> MMU: mapping logical and Physical address in run-time.
             -> Page Table: stores frame number and optional protection bits.
***          -> Virtual Memory:
             -> Inverted Page table: (used when page table size is very huge!!) it consists of one page table entry,
                                     for every frame of main memory so one table shows paging info of all processes.
             -> 


4. SOFTWARE MODELS: 
  
  (a) Objectives: Maintainability, Reusability, Correctness, Portability, Adaptibility.

  (b) Waterfall Model: 
             -> simpler and easier.
             -> divides life into set of phases.
             -> (sequential flow!!)one phase started after completion of previous phase.
             -> phases:    feasibility studey, requirement analysis, design, coding, intergrity&testing.

  (c) Iterative Waterfall Model: 
             -> have feedback paths from every phase to its preceding phases.
             -> Disadvantages: risk handling not supported, overlapping of phases not supported.

  (d) Spiral Model: 
             -> Support Risk Handling.
             -> Each loop is phase of software development.
             -> Radius represent cost of project.
             -> Disadvantages: cost, time management difficulty, too much dependable on risk analysis.
 
  (e) Incremental Model: 
             -> first simple features added , then after successive iterations many other complex features are added.
             -> Types: Staged, Parallel.
             -> Advantages: low initial delievery cost, error reduction.
             -> Disadvantages: total cost is not lower, requires good planning and design, well defined modules.

  (f) RAD (Rapid application  development): 
             -> The critical feature of this model is the use of powerful development tools and techniques.
             -> A software project can be implemented using this model if the project can be broken down into small modules wherein each module can be assigned independently to separate teams.
             -> Advantages: Feedback available at initial stages, reduced cost.
             -> Disadvantages: powerful tools required skilled professionals, The systems which cannot be modularized suitably cannot use this model.

  (g) Coupling and Cohesion: 
             -> Design is iterative: (1)conceptual (2) technical.
             -> low coupling is good. means low interdependence among various modules.
             -> high cohesion is good. 
             -> Modularization: Modularization is the process of dividing a software system into multiple independent modules 
                where each module works independently. 
             -> Cohesion is a measure of the degree to which the elements of the module are functionally related.

  (h) COCOMO model: 
             -> Model based on line of control.
             -> key param: effort and schedule.
             -> mathematical formaulas are used to calculate the cost.
             -> different Phases: -> Planning and requirement,
                                  -> system design,
                                  -> detailed design,
                                  -> module code and test,
                                  -> integration and test,
                                  -> cost constructive model.
                                 
  (i) Project size esimation techiques: 
             -> lines of  code.
             -> number of entities in ER diagram
             -> total number of processes in detailed data flow diagram
             -> function point analysis

  (j) Quality of  good SRS: 
             -> Correctness
             -> completeness
             -> consistency
             -> unambiguous
             -> ranking for importance
             -> design interdependence
             -> Testability 

  (k) Selenium: 
             -> Selenium is an automation tool and portable software testing tool for web applications.

   (l) Testing: 
            -> Black Box: functionality of software is unknown. it can be done in following ways:
                  -> syntax driven testing.
                  -> equivalence partitioning
                  -> boundary value analysis.
                  -> requirement based testing
                  -> compatibility testing
            -> White Box: To amalyze internal Structures.   
                  -> statement coverage.
                  -> branch coverage
                  -> condition coverage
                  ->cyclomatic complexity

5. Computer Networks: 

  (a)

